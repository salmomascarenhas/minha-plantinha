# ==============================================
# DOCKER COMPOSE - PRODUCTION BASE
# ==============================================

services:
  db:
    image: postgres:15-alpine
    container_name: db-${NODE_ENV:-development}
    restart: unless-stopped
    env_file:
      - .env.${NODE_ENV:-development}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
      target: production
    container_name: backend-${NODE_ENV:-development}
    restart: unless-stopped
    env_file:
      - .env.${NODE_ENV:-development}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./client
      dockerfile: dockerfile
      target: production
    container_name: frontend-${NODE_ENV:-development}
    restart: unless-stopped
    ports:
      - "8080:80"
    networks:
      - app-network
    depends_on:
      - backend

networks:
  app-network:
    name: minha-plantinha-${NODE_ENV:-development}

volumes:
  db_data:
    name: minha-plantinha-db-${NODE_ENV:-development}
